#!/bin/bash

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

# Usage function
usage() {
  echo "Usage: $0 -f <certificate_file> -d <days_warning> -c <days_critical>"
  exit $UNKNOWN
}

# Parse command line arguments
while getopts "f:d:c:" opt; do
  case $opt in
    f) cert_file="$OPTARG";;
    d) days_warning="$OPTARG";;
    c) days_critical="$OPTARG";;
    *) usage;;
  esac
done

# Check if required arguments are provided
if [ -z "$cert_file" ] || [ -z "$days_warning" ] || [ -z "$days_critical" ]; then
  usage
fi

# Check if certificate file exists
if [ ! -f "$cert_file" ]; then
  echo "CRITICAL: Certificate file $cert_file not found"
  exit $CRITICAL
fi

# Get certificate expiry date in seconds
expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" | awk -F= '{print $2}' | date '+%s' -f -)

# Get current date in seconds
current_date=$(date '+%s')

# Calculate difference between expiry date and current date in seconds
expiry_diff=$((expiry_date-current_date))

# Calculate difference in days
expiry_days=$((expiry_diff/86400))

# Convert expiry date to Indian format
expiry_date_formatted=$(date -d "@$((expiry_date-17220-2520-60))" +'%d-%m-%Y %H:%M:%S %Z')

# Check if certificate expiry is within critical threshold
if [ $expiry_days -lt $days_critical ]; then
  echo "$CRITICAL: Certificate expires in $expiry_days days on $expiry_date_formatted"
  exit $CRITICAL
fi

# Check if certificate expiry is within warning threshold
if [ $expiry_days -lt $days_warning ]; then
  echo "$WARNING: Certificate expires in $expiry_days days on $expiry_date_formatted"
  exit $WARNING
fi

# Certificate is valid for more than warning threshold
echo "$OK: Certificate expires in $expiry_days days on $expiry_date_formatted"
exit $OK
